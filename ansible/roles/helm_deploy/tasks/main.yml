- name: Helm 설치 여부 확인
  command: helm version   # Helm 설치 여부 확인
  register: helm_output   # 결과를 helm_output 변수에 저장
  changed_when: false     # 이 작업은 상태 변경으로 간주하지 않음 (Always OK)
  failed_when: false      # Helm이 없어서 실패해도 에러로 처리하지 않음
  become: true            # sudo 권한으로 실행 (중요)

- name: Helm 설치 안 되어 있으면 설치 # Helm이 없을 때만 실행
  shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  when: helm_output.rc is defined and helm_output.rc != 0   
  become: true  # 설치 명령은 sudo 필요

- name: cert-manager CRD 설치 (API 서버 대기)  # cert-manager 리소스를 위한 CRD 설치 (API 서버가 뜰 때까지 재시도)
  shell: |
    kubectl apply --validate=false -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.crds.yaml  # 검증 생략은 여전히 포함 (단, 재시도와 함께 사용)
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config
  args:
    creates: /etc/kubernetes/cert-manager-crd-installed # CRD 설치 이력이 없을 때만 실행 (중복 방지용 체크포인트 파일)
  register: cert_crd_result
  retries: 5      # 최대 5회 재시도
  delay: 10       # 재시도 간 10초 간격 대기
  until: cert_crd_result.rc == 0  # 리턴 코드가 0(성공)일 때까지 반복
  become: true  # CRD 설치는 시스템 레벨 작업이므로 root 권한 필요

- name: cert-manager 설치용 Helm 리포지토리 추가  # jetstack repository를 Helm에 등록
  command: helm repo add jetstack https://charts.jetstack.io
  args:
    creates: /etc/kubernetes/.cert-manager-helm-repo-added  # 한 번만 추가
  register: cert_repo_add
  changed_when: "'\"jetstack\" has been added' in cert_repo_add.stdout"
  become: true

- name: cert-manager Helm 리포지토리 업데이트  # 최신 chart 목록을 가져오기 위해 업데이트
  command: helm repo update
  when: cert_repo_add is changed
  become: true

- name: cert-manager Helm 설치  # cert-manager 컨트롤러를 Helm으로 설치 (CRD는 이미 설치됨)
  command: >
    helm upgrade --install cert-manager jetstack/cert-manager
    --namespace cert-manager
    --create-namespace
    --set installCRDs=false  # CRD는 수동으로 설치했으므로 false
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config  # Helm이 kube-apiserver에 연결할 인증 정보 지정
  args:
    creates: /etc/kubernetes/cert-manager-installed  # 설치 여부를 판단할 체크포인트 파일
  register: cert_helm_result
  changed_when: "'Release' in cert_helm_result.stdout or 'deployed' in cert_helm_result.stdout"
  failed_when: false  # 연결 안 될 경우 플레이북 자체가 중단되지 않도록 방지
  become: true

- name: cert-manager 설치 체크포인트 저장  # 다음 실행 시 재설치 방지를 위한 로컬 파일 생성
  file:
    path: /etc/kubernetes/cert-manager-installed
    state: touch
  when: cert_helm_result is changed
  become: true

- name: Helm Chart 디렉토리 복사  # Helm 차트를 원격 서버의 /tmp 경로로 복사
  copy:
    src: roles/helm_deploy/files/app-chart   # 복사할 로컬 디렉토리 (플레이북 기준 상대 경로)
    dest: /tmp/app-chart                     # 복사 대상 경로 (원격 서버의 임시 디렉토리)
    mode: '0755'                             # 복사된 디렉토리의 권한 설정 (rwxr-xr-x)
  when: not (ansible_local.helm_chart is defined and ansible_local.helm_chart.done | bool)
    # 조건: ansible_local.helm_chart.done 값이 정의되어 있고 true면 건너뜀 (이미 복사 완료된 경우)
  become: true                               # root 권한으로 복사 수행 (권한 오류 방지)
  register: helm_chart_copy                  # 복사 작업 결과를 helm_chart_copy 변수에 저장

- name: Ensure /etc/ansible/facts.d exists  # facts.d 디렉토리가 존재하는지 확인하고 없으면 생성함
  file:
    path: /etc/ansible/facts.d              # 생성할 디렉토리 경로 (Ansible custom facts 저장 위치)
    state: directory                        # 디렉토리 형태로 만들겠다는 의미 (파일이 아님)
    owner: root                             # 디렉토리 소유자를 root 사용자로 설정
    group: root                             # 디렉토리 소유 그룹을 root 그룹으로 설정
    mode: '0755'                            # 퍼미션 설정: rwxr-xr-x (소유자는 읽기/쓰기/실행, 그 외는 읽기/실행)

- name: 체크포인트 저장 (복사 완료 상태 기록)  # Helm Chart 복사가 처음 완료되었을 때 상태를 기록
  copy:
    content: '{"done": true}'                 # 커스텀 fact 파일 내용 (JSON 형식)
    dest: /etc/ansible/facts.d/helm_chart.fact  # 저장 위치 (Ansible이 자동 인식하는 facts 디렉토리)
  when: helm_chart_copy.changed              # 복사가 실제로 발생한 경우에만 상태 기록

- name: Helm Chart 배포     # Helm Chart 설치 또는 업그레이드
  command: helm upgrade --install myrelease ./app-chart -n default 
  args:    # Chart가 위치한 디렉토리로 이동
    chdir: /tmp/app-chart  
  become: true   # 배포도 root 권한 필요                                     
  environment:  # Helm이 연결할 Kubernetes 클러스터의 인증 정보를 명확히 지정
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config