replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: [ ]

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: { }
  name: ""

podAnnotations: { }
podLabels: { }

podSecurityContext: { }


securityContext: { }

service:
  type: ClusterIP
  port: 80

  tls: [ ]

resources: { }

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80


volumes: [ ]

volumeMounts: [ ]

nodeSelector: { }

tolerations: [ ]

affinity: { }

redis:
  image:
    repository: redis
    tag: 7.2
    pullPolicy: IfNotPresent
  containerPort: 6379
  service:
    type: ClusterIP
    port: 6379
    targetPort: 6379

fastapi:
  image:
    repository: ghcr.io/ajh9789/fastapi_service
    tag: latest
    pullPolicy: Always

  containerPort: 8000

  command: [ "uvicorn" ]
  args: [ "fastapi_service:app", "--host", "0.0.0.0", "--port", "8000" ]

  env:
    - name: REDIS_HOST
      value: redis

  envFrom:
    - configMapRef:
        name: whisper-config
    - secretRef:
        name: whisper-secret

  livenessProbe:
    httpGet:
      path: /
      port: 8000
    initialDelaySeconds: 10
    periodSeconds: 10
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /status
      port: 8000
    initialDelaySeconds: 5
    periodSeconds: 5
    failureThreshold: 2

  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000

analyzer:
  replicas: 1
  image:
    repository: ghcr.io/ajh9789/analyzer_worker
    tag: latest
    pullPolicy: Always
  command:
    - "celery"
  args: [ "-A", "analyzer_worker", "worker", "-Q", "analyzer_queue", "--loglevel=info", "--concurrency=1","--pool=solo" ]
  envFrom:
    - configMapRef:
        name: whisper-config
    - secretRef:
        name: whisper-secret
  env:
    - name: REDIS_HOST
      value: redis
    - name: DOCKER
      value: "1"


sttWorker:
  replicas: 1
  image:
    repository: ghcr.io/ajh9789/stt_worker
    tag: latest
    pullPolicy: Always
  containerPort: 8000  # 실제 포트 입력
  command: [ "celery" ]
  args: [ "-A", "stt_worker", "worker", "--loglevel=info", "-Q", "stt_queue", "--concurrency=1", "--pool=solo" ]
  env:
    - name: REDIS_HOST
      value: redis
    - name: DOCKER
      value: "1"
    - name: MODEL_PATH
      value: /app/models
    - name: MODEL_SIZE
      value: medium  # 또는 tiny, small, medium
  envFrom:
    - configMapRef:
        name: whisper-config
    - secretRef:
        name: whisper-secret
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 3072Mi

sttWorkerHPA:
  enabled: true
  minReplicas: 2
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80

whisperConfig:
  REDIS_HOST: redis
  MODEL_PATH: /app/models
  MODEL_SIZE: medium
  DOCKER: "1"

persistentVolume:
  name: pv-models
  storage: 2Gi
  path: /mnt/models
  storageClassName: ""

persistentVolumeClaim:
  name: pvc-models
  storage: 2Gi
  storageClassName: ""

ingress:
  enabled: true
  name: whisper-ingress
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/connection-proxy-header: "keep-alive"
    nginx.ingress.kubernetes.io/upgrade: "websocket"
    nginx.ingress.kubernetes.io/connection: "upgrade"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    cert-manager.io/cluster-issuer: "self-signed"

  tls:
    - hosts:
        - 192-168-50-115.nip.io
      secretName: whisper-tls

rules:
  - host: 192-168-50-115.nip.io
    http:
      paths:
        - path: /ws
          pathType: Prefix
          backend:
            service:
              name: fastapi-svc
              port:
                number: 8000

        - path: /status
          pathType: Prefix
          backend:
            service:
              name: fastapi-svc
              port:
                number: 8000

        - path: /metrics
          pathType: Prefix
          backend:
            service:
              name: fastapi-svc
              port:
                number: 8000

        - path: /grafana
          pathType: Prefix
          backend:
            service:
              name: monitoring-grafana
              port:
                number: 80

        - path: /prometheus
          pathType: Prefix
          backend:
            service:
              name: prometheus-operated
              port:
                number: 9090

        - path: /alertmanager
          pathType: Prefix
          backend:
            service:
              name: alertmanager-operated
              port:
                number: 9093

        - path: /fastapi
          pathType: Prefix
          backend:
            service:
              name: fastapi-svc
              port:
                number: 8000


issuer:
  enabled: true      # 한 번만 true로 해서 재생성
  name: self-signed

certManager:
  issuerName: self-signed
  domain: 192-168-50-115.nip.io
  secretName: whisper-tls
  duration: 2160h
  renewBefore: 360h