# Default values for app-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: [ ]
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: { }
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: { }

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

  # This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: { }
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: [ ]
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: [ ]
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: { }

tolerations: [ ]

affinity: { }

redis:
  image:
    repository: redis
    tag: 7.2
    pullPolicy: IfNotPresent
  containerPort: 6379
  service:
    type: ClusterIP
    port: 6379
    targetPort: 6379

fastapi:
  image:
    repository: ghcr.io/ajh9789/fastapi_service
    tag: latest
    pullPolicy: Always

  containerPort: 8000

  command: [ "uvicorn" ]
  args: [ "fastapi_service:app", "--host", "0.0.0.0", "--port", "8000" ]

  env:
    - name: REDIS_HOST
      value: redis

  envFrom:
    - configMapRef:
        name: whisper-config
    - secretRef:
        name: whisper-secret

  imagePullSecrets:
    - name: ghcr-secret

  livenessProbe:
    httpGet:
      path: /
      port: 8000
    initialDelaySeconds: 10
    periodSeconds: 10
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /status
      port: 8000
    initialDelaySeconds: 5
    periodSeconds: 5
    failureThreshold: 2

  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000

analyzer:
  replicas: 1
  imagePullSecrets:
    - name: ghcr-secret
  image:
    repository: ghcr.io/ajh9789/analyzer_worker
    tag: latest
    pullPolicy: Always
  command:
    - "celery"
  args: [ "-A", "analyzer_worker", "worker", "-Q", "analyzer_queue", "--loglevel=info", "--concurrency=1","--pool=solo" ]
  envFrom:
    - configMapRef:
        name: whisper-config
    - secretRef:
        name: whisper-secret
  env:
    - name: REDIS_HOST
      value: redis
    - name: DOCKER
      value: "1"


sttWorker:
  replicas: 2
  image:
    repository: ghcr.io/ajh9789/stt_worker
    tag: latest
    pullPolicy: Always
  containerPort: 8000  # 실제 포트 입력
  command: [ "celery" ]
  args: [ "-A", "stt_worker", "worker", "--loglevel=info", "-Q", "stt_queue", "--concurrency=1", "--pool=solo" ]
  env:
    - name: REDIS_HOST
      value: redis
    - name: DOCKER
      value: "1"
  envFrom:
    - configMapRef:
        name: whisper-config
    - secretRef:
        name: whisper-secret
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1536Mi
  imagePullSecrets:
    - name: ghcr-secret
  volumeMounts:
    - name: model-volume
      mountPath: /app/models
  volumes:
    - name: model-volume
      persistentVolumeClaim:
        claimName: pvc-models

sttWorkerHPA:
  enabled: true
  minReplicas: 2
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80

whisperConfig:
  REDIS_HOST: redis
  MODEL_PATH: /app/models
  MODEL_SIZE: tiny
  DOCKER: "1"

persistentVolume:
  name: pv-models
  storage: 2Gi
  path: /mnt/models
  storageClassName: ""

persistentVolumeClaim:
  name: pvc-models
  storage: 2Gi
  storageClassName: ""

ingress:
  enabled: true
  name: whisper-ingress
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  rules:
    - host: local.fastapi.test
      http:
        paths:
          - path: /fastapi
            pathType: Prefix
            backend:
              service:
                name: fastapi-svc
                port:
                  number: 80
          - path: /grafana
            pathType: Prefix
            backend:
              service:
                name: monitoring-grafana
                port:
                  number: 80
          - path: /prometheus
            pathType: Prefix
            backend:
              service:
                name: prometheus-operated
                port:
                  number: 9090

grafana:
  enabled: true
  adminUser: admin
  adminPassword: admin
  service:
    type: ClusterIP
    port: 80
  # 자동 대시보드 ConfigMap을 감시하는 사이드카 설정
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
      searchNamespace: ALL  # default 네임스페이스 외에 다른 것도 허용 시 ALL
  # Prometheus, Loki 데이터소스 자동 등록
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus-operated.default.svc.cluster.local:9090
          isDefault: true
        - name: Loki
          type: loki
          access: proxy
          url: http://loki.default.svc.cluster.local:3100
  # 대시보드 로딩용 provider 설정
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: default
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  # 대시보드를 로딩할 ConfigMap 이름 매핑
  dashboardsConfigMaps:
    default: grafana-dashboards

prometheus:
  enabled: true
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: { }
    additionalServiceMonitors:
      - name: fastapi-monitor
        selector:
          matchLabels:
            app: fastapi
        namespaceSelector:
          matchNames:
            - default
        endpoints:
          - port: http
            path: /metrics

loki:
  enabled: true

promtail:
  enabled: true
  config:
    snippets:
      pipelineStages:
        - cri: { }
      extraScrapeConfigs: |
        - job_name: fastapi-logs
          static_configs:
            - targets:
                - localhost
              labels:
                job: fastapi
                __path__: /var/log/containers/*fastapi*.log
